#server.address=localhost
#server.port=8080

# API 호출시, SQL 문을 콘솔에 출력한다.
spring.jpa.show-sql=true

# DDL 정의시 데이터베이스의 고유 기능을 사용합니다.
# ex) 테이블 생성, 삭제 등
spring.jpa.generate-ddl=true

# MySQL 을 사용할 것.
spring.jpa.database=mysql

# MySQL 설정
spring.datasource.url=jdbc:mysql://localhost:3306/chicha?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://chicha.caelgauco6de.ap-northeast-2.rds.amazonaws.com:3306/chicha?serverTimezone=UTC&characterEncoding=UTF-8
#spring.datasource.username=root
#spring.datasource.password=g2duswjd12!

# MySQL 상세 지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

# 엔티티 정보를 바탕으로 테이블 자동 생성
spring.jpa.hibernate.ddl-auto=create
#spring.jpa.hibernate.ddl-auto=update

# sql 보여줌
spring.jpa.hibernate.show_sql=true
# 정렬
spring.jpa.properties.hibernate.format_sql=true

# Oauth
#spring.profiles.include=oauth

# 템플릿
spring.devtools.livereload.enabled=true
spring.freemarker.cache=false
spring.thymeleaf.cache=false

# 에러처리
server.error.include-exception=true
server.error.include-stacktrace=always